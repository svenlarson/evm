==========
Stack: Stack { elements: [] }
0 PUSH1 80
Stack: Stack { elements: [ Integer { value: 128n } ] }
==========
Stack: Stack { elements: [ Integer { value: 128n } ] }
1 PUSH1 40
Stack: Stack {
  elements: [ Integer { value: 64n }, Integer { value: 128n } ] }
==========
Stack: Stack {
  elements: [ Integer { value: 64n }, Integer { value: 128n } ] }
2 MSTORE 
Stack: Stack { elements: [] }
==========
Stack: Stack { elements: [] }
3 CALLVALUE 
Stack: Stack {
  elements: [ CALLVALUE { name: 'CALLVALUE', wrapped: false } ] }
==========
Stack: Stack {
  elements: [ CALLVALUE { name: 'CALLVALUE', wrapped: false } ] }
4 DUP1 
Stack: Stack {
  elements:
   [ CALLVALUE { name: 'CALLVALUE', wrapped: false },
     CALLVALUE { name: 'CALLVALUE', wrapped: false } ] }
==========
Stack: Stack {
  elements:
   [ CALLVALUE { name: 'CALLVALUE', wrapped: false },
     CALLVALUE { name: 'CALLVALUE', wrapped: false } ] }
5 ISZERO 
Stack: Stack {
  elements:
   [ ISZERO { name: 'ISZERO', wrapped: true, item: [CALLVALUE] },
     CALLVALUE { name: 'CALLVALUE', wrapped: false } ] }
==========
Stack: Stack {
  elements:
   [ ISZERO { name: 'ISZERO', wrapped: true, item: [CALLVALUE] },
     CALLVALUE { name: 'CALLVALUE', wrapped: false } ] }
6 PUSH1 0f
Stack: Stack {
  elements:
   [ Integer { value: 15n },
     ISZERO { name: 'ISZERO', wrapped: true, item: [CALLVALUE] },
     CALLVALUE { name: 'CALLVALUE', wrapped: false } ] }
==========
Stack: Stack {
  elements:
   [ Integer { value: 15n },
     ISZERO { name: 'ISZERO', wrapped: true, item: [CALLVALUE] },
     CALLVALUE { name: 'CALLVALUE', wrapped: false } ] }
7 JUMPI 
==========
Stack: Stack {
  elements: [ CALLVALUE { name: 'CALLVALUE', wrapped: false } ] }
11 JUMPDEST 
Stack: Stack {
  elements: [ CALLVALUE { name: 'CALLVALUE', wrapped: false } ] }
==========
Stack: Stack {
  elements: [ CALLVALUE { name: 'CALLVALUE', wrapped: false } ] }
12 POP 
Stack: Stack { elements: [] }
==========
Stack: Stack { elements: [] }
13 PUSH1 40
Stack: Stack { elements: [ Integer { value: 64n } ] }
==========
Stack: Stack { elements: [ Integer { value: 64n } ] }
14 DUP1 
Stack: Stack {
  elements: [ Integer { value: 64n }, Integer { value: 64n } ] }
==========
Stack: Stack {
  elements: [ Integer { value: 64n }, Integer { value: 64n } ] }
15 MLOAD 
Stack: Stack {
  elements: [ Integer { value: 128n }, Integer { value: 64n } ] }
==========
Stack: Stack {
  elements: [ Integer { value: 128n }, Integer { value: 64n } ] }
16 PUSH1 20
Stack: Stack {
  elements:
   [ Integer { value: 32n },
     Integer { value: 128n },
     Integer { value: 64n } ] }
==========
Stack: Stack {
  elements:
   [ Integer { value: 32n },
     Integer { value: 128n },
     Integer { value: 64n } ] }
17 DUP1 
Stack: Stack {
  elements:
   [ Integer { value: 32n },
     Integer { value: 32n },
     Integer { value: 128n },
     Integer { value: 64n } ] }
==========
Stack: Stack {
  elements:
   [ Integer { value: 32n },
     Integer { value: 32n },
     Integer { value: 128n },
     Integer { value: 64n } ] }
18 DUP3 
Stack: Stack {
  elements:
   [ Integer { value: 128n },
     Integer { value: 32n },
     Integer { value: 32n },
     Integer { value: 128n },
     Integer { value: 64n } ] }
==========
Stack: Stack {
  elements:
   [ Integer { value: 128n },
     Integer { value: 32n },
     Integer { value: 32n },
     Integer { value: 128n },
     Integer { value: 64n } ] }
19 MSTORE 
Stack: Stack {
  elements:
   [ Integer { value: 32n },
     Integer { value: 128n },
     Integer { value: 64n } ] }
==========
Stack: Stack {
  elements:
   [ Integer { value: 32n },
     Integer { value: 128n },
     Integer { value: 64n } ] }
20 PUSH1 0d
Stack: Stack {
  elements:
   [ Integer { value: 13n },
     Integer { value: 32n },
     Integer { value: 128n },
     Integer { value: 64n } ] }
==========
Stack: Stack {
  elements:
   [ Integer { value: 13n },
     Integer { value: 32n },
     Integer { value: 128n },
     Integer { value: 64n } ] }
21 SWAP1 
Stack: Stack {
  elements:
   [ Integer { value: 32n },
     Integer { value: 13n },
     Integer { value: 128n },
     Integer { value: 64n } ] }
==========
Stack: Stack {
  elements:
   [ Integer { value: 32n },
     Integer { value: 13n },
     Integer { value: 128n },
     Integer { value: 64n } ] }
22 DUP3 
Stack: Stack {
  elements:
   [ Integer { value: 128n },
     Integer { value: 32n },
     Integer { value: 13n },
     Integer { value: 128n },
     Integer { value: 64n } ] }
==========
Stack: Stack {
  elements:
   [ Integer { value: 128n },
     Integer { value: 32n },
     Integer { value: 13n },
     Integer { value: 128n },
     Integer { value: 64n } ] }
23 ADD 
Stack: Stack {
  elements:
   [ Integer { value: 160n },
     Integer { value: 13n },
     Integer { value: 128n },
     Integer { value: 64n } ] }
==========
Stack: Stack {
  elements:
   [ Integer { value: 160n },
     Integer { value: 13n },
     Integer { value: 128n },
     Integer { value: 64n } ] }
24 MSTORE 
Stack: Stack {
  elements: [ Integer { value: 128n }, Integer { value: 64n } ] }
==========
Stack: Stack {
  elements: [ Integer { value: 128n }, Integer { value: 64n } ] }
25 PUSH32 48656c6c6f2c20776f726c642100000000000000000000000000000000000000
Stack: Stack {
  elements:
   [ Integer {
       value:
        32745724963525307310390968812818015567732770218178015120085259876740750114816n },
     Integer { value: 128n },
     Integer { value: 64n } ] }
==========
Stack: Stack {
  elements:
   [ Integer {
       value:
        32745724963525307310390968812818015567732770218178015120085259876740750114816n },
     Integer { value: 128n },
     Integer { value: 64n } ] }
26 DUP2 
Stack: Stack {
  elements:
   [ Integer { value: 128n },
     Integer {
       value:
        32745724963525307310390968812818015567732770218178015120085259876740750114816n },
     Integer { value: 128n },
     Integer { value: 64n } ] }
==========
Stack: Stack {
  elements:
   [ Integer { value: 128n },
     Integer {
       value:
        32745724963525307310390968812818015567732770218178015120085259876740750114816n },
     Integer { value: 128n },
     Integer { value: 64n } ] }
27 DUP4 
Stack: Stack {
  elements:
   [ Integer { value: 64n },
     Integer { value: 128n },
     Integer {
       value:
        32745724963525307310390968812818015567732770218178015120085259876740750114816n },
     Integer { value: 128n },
     Integer { value: 64n } ] }
==========
Stack: Stack {
  elements:
   [ Integer { value: 64n },
     Integer { value: 128n },
     Integer {
       value:
        32745724963525307310390968812818015567732770218178015120085259876740750114816n },
     Integer { value: 128n },
     Integer { value: 64n } ] }
28 ADD 
Stack: Stack {
  elements:
   [ Integer { value: 192n },
     Integer {
       value:
        32745724963525307310390968812818015567732770218178015120085259876740750114816n },
     Integer { value: 128n },
     Integer { value: 64n } ] }
==========
Stack: Stack {
  elements:
   [ Integer { value: 192n },
     Integer {
       value:
        32745724963525307310390968812818015567732770218178015120085259876740750114816n },
     Integer { value: 128n },
     Integer { value: 64n } ] }
29 MSTORE 
Stack: Stack {
  elements: [ Integer { value: 128n }, Integer { value: 64n } ] }
==========
Stack: Stack {
  elements: [ Integer { value: 128n }, Integer { value: 64n } ] }
30 SWAP1 
Stack: Stack {
  elements: [ Integer { value: 64n }, Integer { value: 128n } ] }
==========
Stack: Stack {
  elements: [ Integer { value: 64n }, Integer { value: 128n } ] }
31 MLOAD 
Stack: Stack {
  elements: [ Integer { value: 128n }, Integer { value: 128n } ] }
==========
Stack: Stack {
  elements: [ Integer { value: 128n }, Integer { value: 128n } ] }
32 PUSH32 86066750c0fd4457fd16f79750914fbd72db952f2ff0a7b5c6a2a531bc15ce2c
Stack: Stack {
  elements:
   [ Integer {
       value:
        60621235849539967135838375087463129652921281486772794899828230174319912013356n },
     Integer { value: 128n },
     Integer { value: 128n } ] }
==========
Stack: Stack {
  elements:
   [ Integer {
       value:
        60621235849539967135838375087463129652921281486772794899828230174319912013356n },
     Integer { value: 128n },
     Integer { value: 128n } ] }
33 SWAP2 
Stack: Stack {
  elements:
   [ Integer { value: 128n },
     Integer { value: 128n },
     Integer {
       value:
        60621235849539967135838375087463129652921281486772794899828230174319912013356n } ] }
==========
Stack: Stack {
  elements:
   [ Integer { value: 128n },
     Integer { value: 128n },
     Integer {
       value:
        60621235849539967135838375087463129652921281486772794899828230174319912013356n } ] }
34 DUP2 
Stack: Stack {
  elements:
   [ Integer { value: 128n },
     Integer { value: 128n },
     Integer { value: 128n },
     Integer {
       value:
        60621235849539967135838375087463129652921281486772794899828230174319912013356n } ] }
==========
Stack: Stack {
  elements:
   [ Integer { value: 128n },
     Integer { value: 128n },
     Integer { value: 128n },
     Integer {
       value:
        60621235849539967135838375087463129652921281486772794899828230174319912013356n } ] }
35 SWAP1 
Stack: Stack {
  elements:
   [ Integer { value: 128n },
     Integer { value: 128n },
     Integer { value: 128n },
     Integer {
       value:
        60621235849539967135838375087463129652921281486772794899828230174319912013356n } ] }
==========
Stack: Stack {
  elements:
   [ Integer { value: 128n },
     Integer { value: 128n },
     Integer { value: 128n },
     Integer {
       value:
        60621235849539967135838375087463129652921281486772794899828230174319912013356n } ] }
36 SUB 
Stack: Stack {
  elements:
   [ Integer { value: 0n },
     Integer { value: 128n },
     Integer {
       value:
        60621235849539967135838375087463129652921281486772794899828230174319912013356n } ] }
==========
Stack: Stack {
  elements:
   [ Integer { value: 0n },
     Integer { value: 128n },
     Integer {
       value:
        60621235849539967135838375087463129652921281486772794899828230174319912013356n } ] }
37 PUSH1 60
Stack: Stack {
  elements:
   [ Integer { value: 96n },
     Integer { value: 0n },
     Integer { value: 128n },
     Integer {
       value:
        60621235849539967135838375087463129652921281486772794899828230174319912013356n } ] }
==========
Stack: Stack {
  elements:
   [ Integer { value: 96n },
     Integer { value: 0n },
     Integer { value: 128n },
     Integer {
       value:
        60621235849539967135838375087463129652921281486772794899828230174319912013356n } ] }
38 ADD 
Stack: Stack {
  elements:
   [ Integer { value: 96n },
     Integer { value: 128n },
     Integer {
       value:
        60621235849539967135838375087463129652921281486772794899828230174319912013356n } ] }
==========
Stack: Stack {
  elements:
   [ Integer { value: 96n },
     Integer { value: 128n },
     Integer {
       value:
        60621235849539967135838375087463129652921281486772794899828230174319912013356n } ] }
39 SWAP1 
Stack: Stack {
  elements:
   [ Integer { value: 128n },
     Integer { value: 96n },
     Integer {
       value:
        60621235849539967135838375087463129652921281486772794899828230174319912013356n } ] }
==========
Stack: Stack {
  elements:
   [ Integer { value: 128n },
     Integer { value: 96n },
     Integer {
       value:
        60621235849539967135838375087463129652921281486772794899828230174319912013356n } ] }
40 LOG1 
Stack: Stack { elements: [] }
==========
Stack: Stack { elements: [] }
41 STOP 
Stack: Stack { elements: [] }
==========
Stack: Stack {
  elements: [ CALLVALUE { name: 'CALLVALUE', wrapped: false } ] }
8 PUSH1 00
Stack: Stack {
  elements:
   [ Integer { value: 0n },
     CALLVALUE { name: 'CALLVALUE', wrapped: false } ] }
==========
Stack: Stack {
  elements:
   [ Integer { value: 0n },
     CALLVALUE { name: 'CALLVALUE', wrapped: false } ] }
9 DUP1 
Stack: Stack {
  elements:
   [ Integer { value: 0n },
     Integer { value: 0n },
     CALLVALUE { name: 'CALLVALUE', wrapped: false } ] }
==========
Stack: Stack {
  elements:
   [ Integer { value: 0n },
     Integer { value: 0n },
     CALLVALUE { name: 'CALLVALUE', wrapped: false } ] }
10 REVERT 
Stack: Stack {
  elements: [ CALLVALUE { name: 'CALLVALUE', wrapped: false } ] }
Stack: Stack {
  elements: [ CALLVALUE { name: 'CALLVALUE', wrapped: false } ] }
